// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  userName   String @unique
  followedBy User[] @relation("UserFollows")
  following  User[] @relation("UserFollows")

  tweets      Tweet[] @relation(name: "owner_tweet")
  tweetsLiked Tweet[] @relation(name: "user_tweets_like")

  comments      Comment[] @relation(name: "owner_comment")
  commentsLiked Comment[] @relation(name: "user_comments_like")
}

model Tweet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body    String
  owner   User   @relation(name: "owner_tweet", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  comments Comment[]

  likes User[] @relation(name: "user_tweets_like")

  @@index([id, ownerId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body    String
  owner   User   @relation(name: "owner_comment", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  tweet   Tweet  @relation(fields: [tweetId], references: [id])
  tweetId String

  likes User[] @relation(name: "user_comments_like")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
